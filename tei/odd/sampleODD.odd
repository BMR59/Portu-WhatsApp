<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <!-- Any time changes are made to this file, it must be re-processed as an .html and .rng file. This file is *not* our literal schema, so we need to create one every time we make changes.
    To generate an actual schema from this odd file, click on the wrench and red triangle next to the XPath window. Once there, select the TEI ODD XHTML *and* TEI ODD to RelaxNG XML
  options and hit Apply Associated. Once that is done, the computer will crunch the odd file and spit out an html page, along with a .rng file, both of which will be deposited 
  directly into the tei directory in your local drive. The html page has a web rendering of each of the modules and elements in use, and is primarily for referential use, whereas
  the .rng file is the literal schema that will be used to constrain and validate our XML files. The html file is on the same hierarchical level as the .odd file, but the .rng file
  was placed in an out directory that was generated after the first application of the .odd. -->
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Portu Whats-App Sample ODD</title>
        <author>Zac Enick</author>
      </titleStmt>
      <publicationStmt>
        <p>Drafted 17 October 2017 by ZME</p>
      </publicationStmt>
      <sourceDesc>
        <p>Born Digital.</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <schemaSpec ident="oddex1" start="TEI">
        <moduleRef key="tei"/>
        <moduleRef key="spoken" include="u kinesic"/>
        <moduleRef key="transcr" include="damage"/>
        <moduleRef key="analysis" include="pc"/>
        <moduleRef key="namesdates" include="persName"/>
        <moduleRef key="figures" include="figure"/>
        <moduleRef key="corpus" include="channel constitution derivation domain factuality interaction preparedness purpose setting settingDesc textDesc"/>
        <moduleRef key="header" include="abstract editorialDecl encodingDesc fileDesc langUsage language principal profileDesc projectDesc publicationStmt sourceDesc sponsor teiHeader title titleStmt"/>
        <moduleRef key="core" include="abbr author corr editor foreign graphic name p q resp respStmt sic time title expan"/>
        <!-- Selective inclusion of specific elements within a module. The @include attribute says 'include *only* the specific elements that I list in the values,' and the @except 
        attribute would obviously have the opposite effect: 'include every element from the module *except* the ones that I list.-->
       <!-- <moduleRef key="tei"/> -->
        <moduleRef key="gaiji" include="charDecl g glyph glyphName"/>
        <moduleRef key="textstructure" include="TEI body text"/>
        <constraintSpec scheme="isoschematron" ident="ref-id">
          <constraint>
            <sch:pattern>
              <sch:rule context="tei:persName['@ref']">
                <sch:assert test="./starts-with(., '#')">All @ref values must begin with a hashtag.</sch:assert>
              </sch:rule>
            </sch:pattern>
          </constraint>
        </constraintSpec>
        <!-- This <constraintSpec> element just above is an example of how to format a schematron rule in the .odd file. Notice a few things... First of all, while operating
        in the .odd file, you *must* declare the schematron namespace with each element that appears in your schematron pattern. The .odd file is operating in the TEI namespace
        by default, so you are required to express that namespace with schematron elements, so the odd can parse your mark-up. Alo note the fact that the Schematron namespace
        was also declared in the <TEI> element at the very top of this file. Both of these steps are vital to drafing functional Schematron rules. Aside from the additional wrapper
        elements that surround the Schematron rules (and their accompanied attributes whose values you could easily figure out - the value of @scheme is *always* isoschematron
        in this context) the Schematron writing should be rather familiar territory at this point.-->
      </schemaSpec>
      <elementSpec ident="expan" mode="change" module="core">
        <attList>
          <attDef ident="type" mode="replace">
            <valList type="closed">
              <valItem ident="formal"/>
              <valItem ident="uncontracted"/>
              <valItem ident="full"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="kinesic" mode="change" module="spoken">
        <attList>
          <attDef ident="type" mode="replace">
            <valList type="closed">
              <valItem ident="k"/>
              <valItem ident="rs"/>
              <valItem ident="ha"/>
              <valItem ident="lol"/>
            </valList>
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="abbr" mode="change" module="core">
        <attList>
          <attDef ident="type" mode="replace">
            <valList type="closed">
              <valItem ident="informal"/>
              <valItem ident="textese"/>
              <valItem ident="contraction"/>
              <valItem ident="acronym"/>
            </valList>
            <!-- This <elementSpec> element is being used to effectively customize *and* constrain potential attribute values associated with the <phr> element and @type attribute.
            The stock attribute values will be removed from our personal schema, and the values listed above will replace them. Notice the nesting of elements; in <elementSpec
            there are three attributes.. the first identifies the element with the @attribute whose values we are adding, changing, or deleting; the second one identifies the
            modification as "change"; the last one connects the element in question to the module to which it belongs. The <attDef> element has two values, the first of which
            identifies the @attribute whose values we are modifying; the second attribute says we are replacing the TEI values for our own.-->
          </attDef>
        </attList>
      </elementSpec>
      <elementSpec ident="persName" mode="replace" module="namesdates">
        <valList type="closed">
          <valItem ident="#ze"/>
          <valItem ident="#pab"/>
          <valItem ident="#ttb"/>
          <valItem ident="#bmr"/>
        </valList>
      </elementSpec>
    </body>
  </text>
</TEI>
